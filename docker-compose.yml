version: "3"
name: "cardz"

services:
  postgres:
    image: postgres:15.3
    volumes:
      - ./backend/services/postgres/data:/var/lib/postgresql/data/
    ports:
      - ${POSTGRES_MAPPED_PORT}:5432
    environment:
      POSTGRES_DB: ${POSTGRES_KEYCLOAK_DB}
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_KEYCLOAK_DB_USER} -d ${POSTGRES_KEYCLOAK_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASSWORD}
      DB_NAME: ${MONGO_DB}
      DB_USER: ${MONGO_DB_USER}
      DB_PASSWORD: ${MONGO_DB_PASSWORD}
    ports:
      - ${MONGO_MAPPED_PORT}:27017
    volumes:
      - ./backend/services/mongo/scripts/init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./backend/services/mongo/data:/data/db:rw
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/${MONGO_DB} --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - '--logpath'
      - '/dev/null'

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - ./backend/services/minio/data:/data:rw
    ports:
      - ${MINIO_MAPPED_PORT}:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    profiles:
      - donotstart
    image: redis:6
    command: /bin/sh -c "redis-server --requirepass $$PASSWORD"
    environment:
      PASSWORD: ${REDIS_PASSWORD}
    ports:
      - ${REDIS_MAPPED_PORT}:6379

  keycloak:
    build: ./backend/services/keycloak #using custom kc build in order to install curl into container
    command: [ "start-dev", "--import-realm" ] #sort out how to setup kc configuration for production later
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_DB_PASSWORD}
      KC_DB_SCHEMA: public
      KC_HTTP_RELATIVE_PATH: /auth #logging into adminpanel doesn't seem to work without this
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
    volumes:
      - ./backend/services/keycloak/imports:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${KEYCLOAK_MAPPED_PORT}:8080"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8080/auth/realms/${KEYCLOAK_REALM}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  echo:
    profiles:
      - donotstart
    build: ./backend/services/echo
    environment:
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8080
    ports:
      - "10102:8080"
    depends_on:
      - keycloak

  lobby:
    build: ./backend/services/lobby
    environment:
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_HOST: keycloak
      MONGO_HOST: mongodb
      MONGO_DB: ${MONGO_DB}
      MONGO_USERNAME: ${MONGO_DB_USER}
      MONGO_PASSWORD: ${MONGO_DB_PASSWORD}
    ports:
      - "${LOBBY_MAPPED_PORT}:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  game-core:
    build: ./backend/services/game-core
    environment:
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_HOST: keycloak
      MONGO_HOST: mongodb
      MONGO_DB: ${MONGO_DB}
      MONGO_USERNAME: ${MONGO_DB_USER}
      MONGO_PASSWORD: ${MONGO_DB_PASSWORD}
      LOBBY_HOST: lobby
      LOBBY_PORT: 8080
    ports:
      - "${GAME_CORE_MAPPED_PORT}:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  game-durak:
    build: ./backend/services/games/durak

  game-uno:
    build: ./backend/services/games/uno

  social:
    build: ./backend/services/social
    environment:
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_REQUIRE_USER_API_ACCESS: true
      MONGO_HOST: mongodb
      MONGO_DB: ${MONGO_DB}
      MONGO_USERNAME: ${MONGO_DB_USER}
      MONGO_PASSWORD: ${MONGO_DB_PASSWORD}
      MINIO_HOST: minio
      MINIO_ACCESS_KEY: ${MINIO_USER}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
      LOBBY_HOST: lobby
      LOBBY_PORT: 8080
    ports:
      - "${SOCIAL_MAPPED_PORT}:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy

  frontend-service:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./app:/usr/src/app/app-ui
      - /usr/src/app/app/node_modules
